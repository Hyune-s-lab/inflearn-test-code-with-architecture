package com.example.inflearntestcodewitharchitecture.mock

import com.example.inflearntestcodewitharchitecture.common.exception.ResourceNotFoundException
import com.example.inflearntestcodewitharchitecture.user.domain.User
import com.example.inflearntestcodewitharchitecture.user.domain.UserStatus
import com.example.inflearntestcodewitharchitecture.user.service.port.UserRepository
import java.util.*
import java.util.concurrent.atomic.AtomicLong

class FakeUserRepository(
    private val autoGeneratedId: AtomicLong = AtomicLong(0),
    private val data: MutableList<User> = Collections.synchronizedList(mutableListOf()),
): UserRepository {
    override fun findById(id: Long): User? {
        return data.stream().filter { item -> item.id!! == id }.findAny()
            .orElseThrow { ResourceNotFoundException("User", id) }
    }

    override fun findByIdAndStatus(id: Long, active: UserStatus): User? {
        return data.stream().filter { item -> item.id!! == id && item.status === active }.findAny()
            .orElse(null)
    }

    override fun findByEmailAndStatus(email: String, active: UserStatus): User? {
        return data.stream().filter { item -> item.email == email && item.status === active }.findAny()
            .orElse(null)
    }

    override fun save(user: User): User {
        return if (user.id == null || user.id == 0L) {
            val newUser = user.copy(id = autoGeneratedId.incrementAndGet())
            data.add(newUser)
            newUser
        } else {
            data.removeIf { item -> item.id == user.id }
            data.add(user)
            user
        }
    }
}
